
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  role          String?   @db.Text
  banned        Boolean?
  banReason     String?   @db.Text
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?  @db.Text
  userAgent      String?  @db.Text
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?  @db.Text

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid()) @map("_id")
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Contact {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  email     String
  phone     String?
  message   String   @db.Text
  status    Status   @default(PENDING)
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact")
}

model Content {
  id        String   @id @default(cuid()) @map("_id")
  section   String
  title     String
  content   String   @db.Text
  lang      String   @default("es")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([section, lang])
  @@map("content")
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}
